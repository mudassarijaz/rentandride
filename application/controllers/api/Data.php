<?php
defined('BASEPATH') OR exit('No direct script access allowed');

require APPPATH . '/libraries/REST_Controller.php';
require APPPATH . '/libraries/JWT.php';

use Restserver\Libraries\REST_Controller;
use \Firebase\JWT\JWT;

class Data extends REST_Controller
{
  function __construct()
  {
    // Construct the parent class
    parent::__construct();

    // Configure limits on our controller methods
    // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
    $this->methods['users_get']['limit'] = 500; // 500 requests per hour per user/key
    $this->methods['users_post']['limit'] = 100; // 100 requests per hour per user/key
    $this->methods['users_delete']['limit'] = 50; // 50 requests per hour per user/key
    $this->load->model(array('user_model', 'type_model'));
    $this->load->helper(array('url'));
  }

  public function locksmiths_get()
  {
    // Authorization
    $token = $this->get('token');
    if ( $token ) {
      $decoded = JWT::decode($token, 'user_auth', array('HS256'));
      if ( isset ( $decoded->id ) && !empty ( $decoded->id ) ) {
        $users = $this->user_model->getAllTypes();
        $this->response($users, REST_Controller::HTTP_OK);
      } else {
        // Set the response and exit
        $this->response([
            'status' => FALSE,
            'message' => 'No user found.'
        ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
      }
    } else {
      // Set the response and exit
      $this->response([
            'status' => FALSE,
            'message' => 'No token found.'
      ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
    }
  }

  public function locktypes_get()
  {

    $types = $this->type_model->get_type(1);
    $this->response($types, REST_Controller::HTTP_OK);

  }

  public function customers_get()
  {
    // Authorization
    $token = $this->get('token');
    if ( $token ) {
      $decoded = JWT::decode($token, 'user_auth', array('HS256'));
      if ( isset ( $decoded->id ) && !empty ( $decoded->id ) ) {
        $users = $this->user_model->getAllCustomers();
        $this->response($users, REST_Controller::HTTP_OK);
      } else {
        // Set the response and exit
        $this->response([
            'status' => FALSE,
            'message' => 'No user found.'
        ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
      }
    } else {
      // Set the response and exit
      $this->response([
            'status' => FALSE,
            'message' => 'No token found.'
      ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
    }
  }

  public function getLocksmithCustomers_get()
  {
    // Authorization
    $token = $this->get('token');
    if ( $token ) {
      $decoded = JWT::decode($token, 'user_auth', array('HS256'));
      if ( isset ( $decoded->id ) && !empty ( $decoded->id ) ) {
        $users = $this->user_model->getCustomersByLock($decoded->id);
        if ( count( $users ) > 0 ) {
          $this->response($users, REST_Controller::HTTP_OK);
        } else {
          $this->response([
            'status' => FALSE,
            'message' => 'No customers found.'
          ], REST_Controller::HTTP_NOT_FOUND);
        }
      } else {
        // Set the response and exit
        $this->response([
            'status' => FALSE,
            'message' => 'No user found.'
        ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
      }
    } else {
      // Set the response and exit
      $this->response([
            'status' => FALSE,
            'message' => 'No token found.'
      ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
    }
  }

  public function getUser_get()
  {
    $id = (int) $this->get('id');

    // Validate the id.
    if ($id <= 0) {
      // Set the response and exit
      $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
    }

    // Users from a data store e.g. database
    $users = $this->user_model->get_user($id);

    if ($users) {
        // Set the response and exit
        $this->response($users, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
    } else {
        // Set the response and exit
        $this->response([
            'status' => FALSE,
            'message' => 'No users were found'
        ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
    }
  }

  public function users_post()
  {
    // $this->some_model->update_user( ... );
    $message = [
        'id' => 100, // Automatically generated by the model
        'name' => $this->post('name'),
        'email' => $this->post('email'),
        'message' => 'Added a resource'
    ];

    $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
  }

  public function users_delete()
  {
    $id = (int) $this->get('id');

    // Validate the id.
    if ($id <= 0)
    {
        // Set the response and exit
        $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
    }

    // $this->some_model->delete_something($id);
    $message = [
        'id' => $id,
        'message' => 'Deleted the resource'
    ];

    $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code
  }
}
